name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        run: |
          gh release create ${{ github.ref_name }} \
            --title "Release v${{ steps.get_version.outputs.VERSION }}" \
            --notes "Release v${{ steps.get_version.outputs.VERSION }}

          See [CHANGELOG.md](https://github.com/YassineElbouchaibi/apicurio-cli/blob/main/CHANGELOG.md) for details."
        env:
          GH_TOKEN: ${{ github.token }}

  build:
    name: Build Release Binaries
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: apicurio
            archive_name: apicurio-linux-x64.tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_name: apicurio
            archive_name: apicurio-macos-x64.tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_name: apicurio
            archive_name: apicurio-macos-arm64.tar.gz
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            binary_name: apicurio.exe
            archive_name: apicurio-windows-x64.zip

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross compilation tools
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest' && !endsWith(matrix.archive_name, '.zip')
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}
          cd -

      - name: Create archive (Windows)
        if: endsWith(matrix.archive_name, '.zip')
        run: |
          cd target/${{ matrix.target }}/release
          zip ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}
          cd -

      - name: Upload Release Asset
        run: |
          gh release upload ${{ github.ref_name }} ./${{ matrix.archive_name }}
        env:
          GH_TOKEN: ${{ github.token }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}
