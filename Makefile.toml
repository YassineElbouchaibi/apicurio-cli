[tasks.start-docker-env]
description = "Start the docker environment"
command = "docker-compose"
args = ["-f", "docker-compose.dev.yml", "up", "-d"]

[tasks.populate-protos]
description = "Wait for Apicurio and populate simple .proto artifacts (multiple versions)"
script = '''
#!/bin/sh

REGISTRY_URL="http://localhost:8080/apis/registry/v3"
GROUP="default"

echo "Waiting for Apicurio Registry to become ready..."
MAX_WAIT=60
RETRY_DELAY=2
ELAPSED=0

while true; do
  STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$REGISTRY_URL")
  if [ "$STATUS" = "200" ]; then
    echo "Apicurio Registry is ready."
    break
  fi
  if [ "$ELAPSED" -ge "$MAX_WAIT" ]; then
    echo "Error: Timed out waiting for Apicurio Registry ($REGISTRY_URL)"
    exit 1
  fi
  echo "  ...still waiting ($ELAPSED/$MAX_WAIT seconds)"
  sleep "$RETRY_DELAY"
  ELAPSED=$((ELAPSED + RETRY_DELAY))
done

echo "Deleting all artifacts in group '$GROUP'..."
if curl -s -f -X DELETE "$REGISTRY_URL/groups/$GROUP/artifacts"; then
  echo "✅ All artifacts removed from group '$GROUP'"
else
  echo "❌ Failed to delete artifacts in group '$GROUP'"
fi

upload_artifact() {
  ARTIFACT_ID="$1"
  VERSION="$2"
  NAME="$3"
  DESCRIPTION="$4"
  LABELS_JSON="$5"
  REFERENCES_JSON="$6"
  CONTENT_PROTO="$7"

  ESCAPED_CONTENT=$(printf '%s' "$CONTENT_PROTO" \
    | python3 -c "import json,sys; sys.stdout.write(json.dumps(sys.stdin.read())[1:-1])")

  DUMP_FILE="/tmp/${ARTIFACT_ID//./_}_${VERSION}.json"
  cat > "$DUMP_FILE" <<EOF
{
  "artifactId": "$ARTIFACT_ID",
  "artifactType": "PROTOBUF",
  "name": "$NAME",
  "description": "$DESCRIPTION",
  "labels": $LABELS_JSON,
  "firstVersion": {
    "version": "$VERSION",
    "content": {
      "content": "$ESCAPED_CONTENT",
      "contentType": "application/x-protobuf",
      "references": $REFERENCES_JSON
    },
    "name": "$NAME",
    "description": "$DESCRIPTION",
    "labels": {}
  }
}
EOF

  echo "Uploading $ARTIFACT_ID@$VERSION..."
  HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
    -X POST -H "Content-Type: application/json" \
    --data @"$DUMP_FILE" \
    "$REGISTRY_URL/groups/$GROUP/artifacts?ifExists=CREATE_VERSION")

  if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
    echo "✅ Uploaded $ARTIFACT_ID@$VERSION"
  else
    echo "❌ Failed to upload $ARTIFACT_ID@$VERSION (HTTP $HTTP_STATUS)"
  fi

  rm -f "$DUMP_FILE"
}

# === versions to publish ===
VERSIONS=("1.0.0" "1.0.1" "1.1.0" "1.1.1" "1.2.1" "2.1.1")

# === text_message.proto === (no references) ===
TEXT_MESSAGE_PROTO=$(cat <<'EOP'
syntax = "proto3";

package com.example.v1;

message TextMessage {
  string text = 1;
}
EOP
)

for VERSION in "${VERSIONS[@]}"; do
  upload_artifact \
    "com.example.v1.TextMessage" \
    "$VERSION" \
    "TextMessage" \
    "Simple text message type" \
    '{"type":"message","format":"text"}' \
    '[]' \
    "$TEXT_MESSAGE_PROTO"
done

# === ping.proto === (references TextMessage) ===
PING_PROTO=$(cat <<'EOP'
syntax = "proto3";

package com.example.v1;

import "text_message.proto";

service PingService {
  rpc Ping(TextMessage) returns (TextMessage);
}
EOP
)

for VERSION in "${VERSIONS[@]}"; do
  upload_artifact \
    "com.example.v1.PingService" \
    "$VERSION" \
    "PingService" \
    "Ping service that echoes text" \
    '{"type":"service","protocol":"ping"}' \
    '[{"groupId":"default","artifactId":"com.example.v1.TextMessage","version":"'"$VERSION"'","name":"text_message.proto"}]' \
    "$PING_PROTO"
done

# === echo.proto === (references TextMessage) ===
ECHO_PROTO=$(cat <<'EOP'
syntax = "proto3";

package com.example.v1;

import "text_message.proto";

service EchoService {
  rpc Echo(TextMessage) returns (TextMessage);
}
EOP
)

for VERSION in "${VERSIONS[@]}"; do
  upload_artifact \
    "com.example.v1.EchoService" \
    "$VERSION" \
    "EchoService" \
    "Echo service that repeats text" \
    '{"type":"service","protocol":"echo"}' \
    '[{"groupId":"default","artifactId":"com.example.v1.TextMessage","version":"'"$VERSION"'","name":"text_message.proto"}]' \
    "$ECHO_PROTO"
done
'''

[tasks.start-and-populate]
description = "Start the docker environment and populate it with 3 protos (multiple versions)"
dependencies = ["start-docker-env", "populate-protos"]
